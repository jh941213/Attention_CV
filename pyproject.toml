[project]
name = "attention-cv"
version = "0.1.0"
description = "üöÄ AI-powered GitHub Pages generator with conversation memory"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "AI GitHub Pages Team", email = "team@example.com" }
]
keywords = ["ai", "github-pages", "fastapi", "nextjs", "chatbot", "langchain"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Framework :: FastAPI",
]
requires-python = ">=3.11"
dependencies = [
    # üöÄ Core FastAPI & Web Framework
    "fastapi>=0.104.0,<0.110.0",
    "uvicorn[standard]>=0.24.0,<0.30.0",
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    "python-multipart>=0.0.6,<0.1.0",
    "httpx>=0.25.0,<0.28.0",
    "aiofiles>=23.0.0,<24.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    
    # ü§ñ AI & LangChain Integration
    "langchain>=0.1.0,<0.3.0",
    "langchain-openai>=0.1.0,<0.2.0",
    "langchain-anthropic>=0.1.0,<0.2.0",
    "langchain-community>=0.0.20,<0.3.0",
    "langchain-core>=0.1.0,<0.3.0",
    "langgraph>=0.2.74,<0.3.0",
    "openai>=1.12.0,<2.0.0",
    "anthropic>=0.18.0,<1.0.0",
    
    # üêô GitHub & Git Integration
    "GitPython>=3.1.40,<4.0.0",
    "PyGithub>=2.1.0,<3.0.0",
    
    # üîí Security & Authentication
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    
    # üìÑ Document Processing
    "jinja2>=3.1.0,<4.0.0",
    "pypdf>=4.0.0,<5.0.0",
    "docx2txt>=0.8,<1.0",
    "openpyxl>=3.1.0,<4.0.0",
    "unstructured>=0.10.0,<1.0.0",
    "python-magic>=0.4.27,<1.0.0",
    
    # üóÑÔ∏è Data Storage & Caching
    "redis>=5.0.0,<6.0.0",
]

[project.optional-dependencies]
dev = [
    # üß™ Testing
    "pytest>=8.0.0,<9.0.0",
    "pytest-asyncio>=0.23.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "httpx>=0.25.0",  # for testing FastAPI
    
    # üé® Code Formatting & Linting
    "black>=24.0.0,<25.0.0",
    "isort>=5.13.0,<6.0.0",
    "flake8>=7.0.0,<8.0.0",
    "mypy>=1.8.0,<2.0.0",
    "pre-commit>=3.6.0,<4.0.0",
    
    # üìä Code Quality & Security
    "bandit>=1.7.0,<2.0.0",
    "safety>=3.0.0,<4.0.0",
    "ruff>=0.2.0,<1.0.0",
    
    # üîß Development Tools
    "watchdog>=4.0.0,<5.0.0",
    "rich>=13.0.0,<14.0.0",  # Beautiful terminal output
]

test = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-asyncio>=0.23.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "httpx>=0.25.0",
]

lint = [
    "black>=24.0.0,<25.0.0",
    "isort>=5.13.0,<6.0.0", 
    "ruff>=0.2.0,<1.0.0",
    "mypy>=1.8.0,<2.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/attention-cv"
Documentation = "https://github.com/yourusername/attention-cv#readme"
Repository = "https://github.com/yourusername/attention-cv.git"
Issues = "https://github.com/yourusername/attention-cv/issues"

[project.scripts]
attention-cv = "backend.app.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# üöÄ UV Configuration
[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "black>=24.0.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0"
]

# üé® Black Configuration
[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | frontend
  | node_modules
)/
'''

# üì¶ isort Configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["frontend/**", "node_modules/**"]

# ‚ö° Ruff Configuration (Faster linting)
[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "frontend",
]

# üîç MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "frontend/",
    "node_modules/",
    "venv/",
    ".venv/",
]

# üß™ Pytest Configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config", 
    "--cov=backend",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# üìä Coverage Configuration
[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/frontend/*",
    "*/node_modules/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
